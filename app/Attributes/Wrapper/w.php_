<?php

namespace App\Attributes\Wrapper {

    use Laradic\Support\Arr;
    use MyCLabs\Enum\Enum;

    /**
     * @method static AttributeType STRING()
     * @method static AttributeType BOOL()
     * @method static AttributeType INT()
     * @method static AttributeType ARRAY()
     */
    class AttributeType extends Enum
    {
        const MIXED = 'mixed';
        const OBJECT = 'object';
        const STRING = 'string';
        const BOOLEAN = 'boolean';
        const INTEGER = 'integer';
        const ARRAY = 'array';

        public static $apiTypeMap = [
            self::MIXED   => 'Mixed',
            self::OBJECT  => 'Mixed',
            self::STRING  => 'String',
            self::BOOLEAN => 'Boolean',
            self::INTEGER => 'Int',
            self::ARRAY   => 'Assoc',
        ];

        public function toApiType(): string
        {
            return static::$apiTypeMap[ $this->value ];
        }
    }

    trait WithAttributeChildren
    {
        /** @var Attribute[] */
        public $children = [];

        /**
         * add method
         *
         * @param string               $name
         * @param string|AttributeType $type
         * @param string|null          $apiType
         * @param null                 $default
         *
         * @return Attribute
         */
        public function add(string $name, $type, $apiType = null, $default = null)
        {
            return $this->addChild(Factory::attribute($name, $type, $apiType, $default));
        }

        public function addChild(Attribute $attribute)
        {
            $this->children[ $attribute->name ] = $attribute;
            return $attribute;
        }

        public function hasChildren()
        {
            return count($this->children);
        }

        public function hasChild(string $name)
        {
            return array_key_exists($name, $this->children);
        }

        public function getChild(string $name)
        {
            return $this->children[ $name ];
        }
    }

    class AttributeApiType
    {
        /** @var string */
        public $name;

        /** @var bool */
        public $extend = false;

        /** @var bool */
        public $array = false;

        /** @var bool */
        public $new = false;

        /** @var bool */
        public $nonNull = false;

        /** @var bool */
        public $arrayNonNull = false;

        public function __construct(string $name, array $opts = [])
        {
            $this->name = $name;
            $this->enableOptions($opts);
        }

        public function enableOptions(array $opts = [])
        {
            $this->extend       = \in_array('extend', $opts, true) ? true : $this->extend;
            $this->array        = \in_array('array', $opts, true) ? true : $this->array;
            $this->new          = \in_array('new', $opts, true) ? true : $this->new;
            $this->nonNull      = \in_array('nonNull', $opts, true) ? true : $this->nonNull;
            $this->arrayNonNull = \in_array('arrayNonNull', $opts, true) ? true : $this->arrayNonNull;
        }
    }

    class Attribute
    {
        use WithAttributeChildren;

        /** @var string */
        public $name;

        /** @var AttributeType */
        public $type;

        /** @var mixed|callable|null */
        public $default;

        /** @var AttributeApiType */
        public $apiType;

        /**
         * Attribute constructor.
         *
         * @param string                       $name
         * @param string|AttributeType         $type
         * @param null|string|AttributeApiType $apiType
         * @param callable|mixed|null          $default
         *
         * @throws \Exception
         */
        public function __construct(string $name, $type, $apiType = null, $default = null)
        {
            $this->name    = $name;
            $this->default = $default;
            if ( ! $type instanceof AttributeType) {
                if (AttributeType::isValid($type) === false) {
                    throw new \Exception("Invalid attribute type {$type}");
                }
                $type = new AttributeType($type);
            }
            if ($apiType === null) {
                $apiType = $type->toApiType();
            }
            if ( ! $apiType instanceof AttributeApiType) {
                $apiType = new AttributeApiType($apiType);
            }
            $this->type    = $type;
            $this->apiType = $apiType;
        }


        /**
         * Set the default value
         *
         * @param callable|mixed|null $default
         *
         * @return Attribute
         */
        public function setDefault($default)
        {
            $this->default = $default;
            return $this;
        }

        /**
         * Set the apiType value
         *
         * @param string $apiType
         *
         * @return Attribute
         */
        public function setApiType($name, array $opts = [])
        {
            $this->apiType = new AttributeApiType($name, $opts);
            return $this;
        }

        /**
         * Set the type value
         *
         * @param \App\Attributes\Wrapper\AttributeType $type
         *
         * @return Attribute
         */
        public function setType($type)
        {
            $this->type = $type;
            return $this;
        }

        public function resolveDefault()
        {
            if (AttributeType::ARRAY()->equals($this->type)) {
                return $this->children;
            }
            if (is_callable($this->default)) {
                $closure = \Closure::fromCallable($this->default)->bindTo($this);
                return app()->call($closure);
            }
            return $this->default;
        }


    }

    class AttributeGroup
    {
        use WithAttributeChildren;

        /** @var string */
        public $name;

        /** @var AttributeGroup|null */
        public $parentGroup;

        /** @var string[] */
        public $inheritKeys = [];

        /** @var string[] */
        public $mergeKeys = [];

        public function __construct(string $name)
        {
            $this->name = $name;
        }

        public function addInheritKeys($keys)
        {
            foreach (Arr::wrap($keys) as $key) {
                $this->inheritKeys[] = $key;
            }
            return $this;
        }

        public function addMergeKeys($keys)
        {
            foreach (Arr::wrap($keys) as $key) {
                $this->mergeKeys[] = $key;
            }
            return $this;
        }

        public function setParentGroup(AttributeGroup $parentGroup)
        {
            $this->parentGroup = $parentGroup;
            return $this;
        }

        public function hasParentGroup()
        {
            return isset($this->parentGroup);
        }

    }

    class Factory
    {
        public static function group(string $name)
        {
            return app()->make(AttributeGroup::class, compact('name'));
        }

        public static function attribute(string $name, $type, $apiType = null, $default = null)
        {
            /** @var Attribute $attribute */
            $attribute = app()->make(Attribute::class, compact('name', 'type', 'apiType'));
            if ($default !== null) {
                $attribute->setDefault($default);
            }
            return $attribute;
        }
    }

    /**
     * @property-read AttributeGroup $codex
     * @property-read AttributeGroup $projects
     * @property-read AttributeGroup $revisions
     * @property-read AttributeGroup $documents
     */
    class Registry
    {
        /** @var AttributeGroup[] */
        protected $groups = [];

        public function __construct()
        {
            $codex     = $this->addGroup('codex');
            $projects  = $this->addGroup('projects')->setParentGroup($codex);
            $revisions = $this->addGroup('revisions')->setParentGroup($projects);
            $documents = $this->addGroup('documents')->setParentGroup($revisions);
        }

        protected function addGroup(string $name)
        {
            return $this->groups[ $name ] = Factory::group($name);
        }

        public function keys()
        {
            return array_keys($this->groups);
        }

        public function getGroup(string $name)
        {
            return $this->groups[ $name ];
        }

        /**
         * Returns the group after ensuring all the attributes that should inherit and merge are copied from the parent
         *
         * @param string $name
         *
         * @return \App\Attributes\Wrapper\AttributeGroup
         */
        public function resolveGroup(string $name)
        {
            $group = $this->getGroup($name);
            if ( ! $group->hasParentGroup()) {
                return $group;
            }
            $parent = $group->parentGroup;
            foreach (array_merge($group->inheritKeys, $group->mergeKeys) as $sourceKey => $targetKey) {
                if (is_int($sourceKey)) {
                    $sourceKey = $targetKey;
                }
                if ( ! $parent->hasChild($sourceKey) || $group->hasChild($targetKey)) {
                    continue;
                }
                $source = $parent->getChild($sourceKey);
                $group->add($targetKey, $source->type->getValue(), $source->apiType->name, $source->default);
            }
            return $group;
        }

        /** @noinspection MagicMethodsValidityInspection */
        public function __get($key)
        {
            if (array_key_exists($key, $this->groups)) {
                return $this->getGroup($key);
            }
        }

    }

    class AttributeSchemaGenerator
    {
        /** @var \App\Attributes\Wrapper\Registry */
        protected $registry;

        protected $types;

        /**
         * AttributeSchemaGenerator constructor.
         *
         * @param \App\Attributes\Wrapper\Registry $registry
         */
        public function __construct(\App\Attributes\Wrapper\Registry $registry)
        {
            $this->registry = $registry;
        }


        public function generate()
        {
            $this->types = [];
            foreach ($this->registry->keys() as $groupName) {
                $group                     = $this->registry->resolveGroup($groupName);
                $groupType                 = 'type ' . studly_case(str_singular($group->name));
                $this->types[ $groupType ] = [];
                $this->generateChildren($group->children, $this->types[ $groupType ]);
            }

            $generated = collect($this->types)->map(function ($fields, $type) {
                $fields = collect($fields)->map(function ($type, $name) {
                    return "\t{$name}: {$type}";
                })->implode("\n");
                return "{$type} {\n{$fields}\n}";
            })->implode("\n");

            return $generated;
        }

        /** @param Attribute[] $children */
        protected function generateChildren(array $children, array &$parent)
        {
            foreach ($children as $child) {
                $apiType                = $child->apiType;
                $parent[ $child->name ] = $this->toFieldTypeString($apiType);
                if ($apiType->new || $apiType->extend) {
                    $this->types[ $this->toObjectTypeString($apiType) ] = [];
                    if ($child->hasChildren()) {
                        $this->generateChildren($child->children, $this->types[ $this->toObjectTypeString($apiType) ]);
                    }
                }
            }
        }

        protected function toFieldTypeString(AttributeApiType $apiType)
        {
            $parts = [ $apiType->name ];
            if ($apiType->nonNull) {
                $parts[] = '!';
            }
            if ($apiType->array) {
                array_unshift($parts, '[');
                $parts[] = ']';
            }
            if ($apiType->array && $apiType->arrayNonNull) {
                $parts[] = '!';
            }
            return implode('', $parts);
        }

        protected function toObjectTypeString(AttributeApiType $apiType)
        {
            return ($apiType->extend ? 'extend ' : '') . 'type ' . $apiType->name;
        }
    }

    class AttributeConfigGenerator
    {
    }

    app()->singleton(Registry::class);


    $registry = app(Registry::class);
    $codex    = $registry->codex;
    $codex->add('display_name', 'string')->setDefault('Codex');
    $codex->add('description', 'string')->setDefault('');
    $codex->add('default_project', 'string', 'ID')->setDefault(null);
    $menu = Factory::attribute('menu', 'array')->setApiType('MenuItem', [ 'array', 'new' ]);
    $menu->add('id', 'string', 'ID', function () {
        return md5(str_random());
    });
    $menu->add('type', 'string')->setDefault('link');
    $menu->add('side', 'string');
    $menu->add('target', 'string')->setDefault('self');
    $menu->add('href', 'string');
    $menu->add('path', 'string');
    $menu->add('expand', 'boolean');
    $menu->add('selected', 'boolean');
    $menu->add('label', 'string');
    $menu->add('sublabel', 'string');
    $menu->add('icon', 'string');
    $menu->add('color', 'string');
    $menu->add('project', 'string');
    $menu->add('revision', 'string');
    $menu->add('document', 'string');
    $menu->add('projects', 'boolean');
    $menu->add('revisions', 'boolean');
    $menu->add('children', 'array')->setApiType('MenuItem', [ 'array' ]);

    $layout                  = $codex->add('layout', 'array')->setApiType('Layout', [ 'new' ]);
    $addLayoutPart           = function (string $name, string $apiType) use ($layout) {
        $part = $layout->add($name, 'array')->setApiType($apiType, [ 'new' ]);
        $part->add('class', 'array')->setDefault([]);
        $part->add('style', 'array')->setDefault([]);
        $part->add('color', 'string')->setDefault(null);
        return $part;
    };
    $addLayoutHorizontalSide = function (string $name, string $apiType) use ($addLayoutPart, $menu) {
        $part = $addLayoutPart($name, $apiType);
        $part->add('show', 'boolean');
        $part->add('collapsed', 'boolean');
        $part->add('outside', 'boolean');
        $part->add('width', 'integer')->setDefault(200);
        $part->add('collapsedWidth', 'integer')->setDefault(50);
        $part->addChild($menu);
        return $part;
    };
    $addLayoutVerticalSide   = function (string $name, string $apiType) use ($addLayoutPart, $menu) {
        $part = $addLayoutPart($name, $apiType);
        $part->add('show', 'boolean');
        $part->add('fixed', 'boolean');
        $part->add('height', 'integer')->setDefault(64);
        $part->addChild($menu);
        return $part;
    };
    $layoutContainer         = $addLayoutPart('container', 'LayoutContainer');
    $layoutHeader            = $addLayoutHorizontalSide('header', 'LayoutHeader');
    $layoutFooter            = $addLayoutHorizontalSide('footer', 'LayoutFooter');
    $layoutLeft              = $addLayoutVerticalSide('left', 'LayoutLeft');
    $layoutRight             = $addLayoutVerticalSide('right', 'LayoutRight');
    $layoutMiddle            = $addLayoutPart('middle', 'LayoutMiddle');
    $layoutContent           = $addLayoutPart('middle', 'LayoutContent');

    $projects = $registry->projects;
    $projects->addInheritKeys([ 'processors', 'layout' ]);
    $projects->add('display_name', 'string')->setDefault(null);
    $projects->add('description', 'string')->setDefault('');
    $projects->add('default_revision', 'string');
    $projects->add('disk', 'string')->setDefault(null);
    $projects->add('view', 'string')->setDefault('codex::document');
    $cache = $projects->add('cache', 'array')->setApiType('Cache', [ 'new' ]);
    $cache->add('mode', 'string')->setDefault(null);
    $cache->add('minutes', 'integer')->setDefault(7);
    $meta = $projects->add('meta', 'array')->setApiType('Meta', [ 'new' ]);
    $meta->add('icon', 'string')->setDefault('fa-book');
    $meta->add('color', 'string')->setDefault('deep-orange');
    $meta->add('license', 'string')->setDefault('MIT');
    $meta->add('stylesheets', 'array')->setDefault([]);
    $meta->add('javascripts', 'array')->setDefault([]);
    $meta->add('styles', 'array')->setDefault([]);
    $meta->add('scripts', 'array')->setDefault([]);
    //        $meta->add('links', 'array')->setDefault([]);

//        $meta->add('authors', 'array')->setDefault([]); //['name' => 'Robin Radic', 'email' => 'rradic@hotmail.com');


    $revisions = $registry->revisions;
    $revisions->addMergeKeys([]);
    $revisions->addInheritKeys([ 'processors', 'meta', 'layout', 'view', 'cache' ]);
    $revisions->add('default_document', 'string');

    $documents = $registry->documents;
    $documents->addMergeKeys([]);
    $documents->addInheritKeys([ 'processors', 'meta', 'layout', 'view', 'cache' ]);
    $documents->add('title', 'string')->setDefault('');
    $documents->add('subtitle', 'string')->setDefault('');
    $documents->add('description', 'string')->setDefault('');

    $schemaGenerator = app()->make(AttributeSchemaGenerator::class);
    $generated       = $schemaGenerator->generate();

    echo $generated;

    $a = 'a';
}
